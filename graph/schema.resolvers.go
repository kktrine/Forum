package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"
	"forum/model"
	"forum/subscription"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, commentsLocked *bool) (*model.Post, error) {
	if len(title) < 3 || len(content) < 5 {
		return nil, errors.New("min length of title = 4, of content = 6")
	}
	return r.Db.CreatePost(title, content, commentsLocked)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID uint, parentID *uint, parentIDS *string, content string) (*model.Comment, error) {
	if len(content) < 5 {
		return nil, errors.New("min len = 5")
	}
	res, err := r.Db.CreateComment(postID, parentID, content)
	if err != nil {
		return nil, err
	}
	subscription.Mu.Lock()
	defer subscription.Mu.Unlock()

	if subscribers, ok := subscription.CommentSubscribers[postID]; ok {
		for _, ch := range subscribers {
			ch <- res
		}
	}
	return res, nil
}

// LockComments is the resolver for the lockComments field.
func (r *mutationResolver) LockComments(ctx context.Context, postID uint) (*model.Post, error) {
	return r.Db.LockComments(postID)
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	return r.Db.Posts()
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id uint, limit *int) (*model.Post, error) {
	return r.Db.Post(id, limit)
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, postID uint, first *int, after *int) (*model.CommentConnection, error) {
	return r.Db.Comments(postID, first, after)
}

// NewComment is the resolver for the newComment field.
func (r *subscriptionResolver) NewComment(ctx context.Context, postID uint) (<-chan *model.Comment, error) {
	subscription.Mu.Lock()
	defer subscription.Mu.Unlock()

	ch := make(chan *model.Comment, 1)
	subscription.CommentSubscribers[postID] = append(subscription.CommentSubscribers[postID], ch)

	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
